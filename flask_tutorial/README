
This is a 'semi-tutorial' for getting 
Flask up and running.

First, one needs to be sure that Flask 
is installed.  If you use 'pip', one can
simply do:

> pip install Flask

If you use virtual environments, I would recommend
that you activate your virtual environment before
running the above pip command.

(Note that flask depends on a few other packages
which pip kindly installs for you)

Next, one needs to run the 'app' that is included
in this package.  It is 'executable' so one can
'dot slash' the app simply by doing:

> ./app.py

However, one can also explicitely use python
by doing:

> python app.py

This will start the server running in the current
terminal.  I would recommend using two terminals:
One to run the app, and another to do further
development.  You'll need the app to continue 
running if you want to be able to visit your 
website from a browser.

Flask is very smart.  When the app is running, it
checks if the file 'app.py' has been updated.  If 
you change something in 'app.py' and save those 
changes to disk, Flask will recognize this and 
reload the server so those changes are propogated
to the website.

When you start your flask server, it will tell you
the 'website' that it is listening to:

 * Running on http://0.0.0.0:5000/
 * Restarting with reloader

 
To view your website, open up a browser and put:
"http://0.0.0.0:5000/" in your url bar.  You
should be able to see the 'hello-world' page
from there.


Flask comes with a nice template rendering framework.
All html templates should be placed in the 'templates'
directory.  Rendered templates are returned by using
the 'render_template' function that one should
import from flask.  One can pass variables to the
template renderer as "keyword arguments" to the
'render_template' function.  A good example of this
can be found in the 'test' method, which can be
viewed by going to:
http://0.0.0.0:5000/test


Flask can also serve JSON requests, just like most
api's.  One can use the 'jsonify' function to return
a JSON string as a http response.  The result of
this can be viewed by going to:
http://0.0.0.0:5000/api


Flask will be running in 'debug' mode, which adds
some nice in-browser error messages when things
break on the server side.  As an example, I've
provided a broken api point that you can test
by going to:
http://0.0.0.0:5000/broken


HAPPY FLASKING!!!